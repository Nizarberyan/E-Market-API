openapi: 3.0.0
info:
  title: E-Market API
  description: A Node.js/Express e-commerce API server with product, user, and category management
  version: 1.0.0
  license:
    name: GPL-3.0-or-later

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Products
    description: Product management endpoints
  - name: Users
    description: User management endpoints
  - name: Categories
    description: Category management endpoints

paths:
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      responses:
        "200":
          description: List of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      tags:
        - Products
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Validation error

  /products/search:
    get:
      tags:
        - Products
      summary: Search products
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Filtered products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
    put:
      tags:
        - Products
      summary: Update a product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
    delete:
      tags:
        - Products
      summary: Delete a product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product deleted successfully
        "404":
          description: Product not found

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Validation error or email already exists

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found

  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      responses:
        "200":
          description: List of all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      tags:
        - Categories
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Validation error

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Category details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
    put:
      tags:
        - Categories
      summary: Update a category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
    delete:
      tags:
        - Categories
      summary: Delete a category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Category deleted successfully
        "404":
          description: Category not found

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: number
        category:
          $ref: "#/components/schemas/Category"
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductInput:
      type: object
      required:
        - title
        - description
        - price
        - stock
        - category
      properties:
        title:
          type: string
          example: Laptop
        description:
          type: string
          example: High-performance laptop
        price:
          type: number
          example: 8999
        stock:
          type: number
          example: 10
        category:
          type: string
          example: 507f1f77bcf86cd799439011
        imageUrl:
          type: string
          example: https://example.com/image.jpg

    User:
      type: object
      properties:
        _id:
          type: string
        fullname:
          type: string
        email:
          type: string
        role:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserInput:
      type: object
      required:
        - fullName
        - email
        - password
      properties:
        fullName:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        password:
          type: string
          example: password123
        role:
          type: string
          example: user

    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CategoryInput:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: Electronics
        description:
          type: string
          example: Electronic devices and accessories
